%% Brainstorm LCMV beamforming pipeline for Human MEG data
%% Created on 02/10/2018
%% Usage: For Human MEG data
%% author: John Mosher@ University of Texas Health Science Center, Huston, Texas, USA
%%         Amit Jaiswal @ MEGIN Oy, Helsinki, Finland <amit.jaiswal@megin.fi>
%%                      @ School of Science, Aalto University, Espoo, Finland
%%         
%% Note: The code is used in the study:
%%      'Comparison of beamformer implementations for MEG source localizations'
%% 
%% Add SPM12 in path 
clear all; clc  
restoredefaultpath 
restoredefaultpath
bst_dir  = 'BeamComp_DataRepo/Toolboxes/brainstorm3_26092019/brainstorm3-master/';
mri_dir  = 'BeamComp_DataRepo/MRI/';
data_dir = 'BeamComp_DataRepo/MEG/';
code_dir = 'BeamComp_CodeRepo/LCMV_pipelines/';
addpath(bst_dir)
addpath(mri_dir)
addpath(data_dir)
addpath(code_dir)

%% Set parameters
par                 = [];
par.sampling_rate   = 600.6150;
par.stimchan        = 'STI 014';
par.badch           = 'MEG 0442';
par.more_plots      = 1;
par.bpfreq          = [2 95];
par.gridres         = 5; % mm
par.cov_cut         = [2, 98];
par.badtrs          = [];
par.moving_maxf     = '';

%% Label events 
keyset   = {'VEF-UR', 'VEF-LR', 'AEF-Re', 'VEF-LL', 'AEF-Le', 'VEF-UL', 'SEF-Lh', 'SEF-Rh'};
valueset = [1, 2, 3, 4, 5, 8, 16, 32];
evdict=containers.Map(keyset, valueset);

actual_diploc=load([code_dir 'multimodal_biomag_Xfit_results.mat']); 
actual_diploc=actual_diploc.multimodal_biomag_Xfit_diploc(:,4:6);

%% Start brainstorm
if ~brainstorm('status')
    brainstorm nogui
end

%% ===== CREATE PROTOCOL =====
ProtocolName = 'HumanMEG';

% Delete existing protocol
gui_brainstorm('DeleteProtocol', ProtocolName);
gui_brainstorm('DeleteProtocol', ProtocolName);
gui_brainstorm('DeleteProtocol', ProtocolName);

% Create new protocol
gui_brainstorm('CreateProtocol', ProtocolName, 0, 0);

% Start a new report
bst_report('Start');

% Phantom anatomy
SubjectName = ['HumanMEG_' date];

RawFile       = [data_dir 'Human_EF/multimodal_raw_tsss.fif'];
[~, dfname,~] = fileparts(RawFile);

%% Process: Import anatomy folder from Freesurfer
MyPrevBstAnatFolder = sprintf('%sBST/Simulated_anat_BST/', mri_dir);  

if ~exist([MyPrevBstAnatFolder, 'brainstormsubject.mat'], 'file')
    bst_process('CallProcess', 'process_import_anatomy', [], [], ...
            'subjectname', SubjectName, ...
            'mrifile',     {AnatDir, 'FreeSurfer'}, ...
            'nvertices',   15000, ...    
            'nas',         [123, 218, 104.5], ...
            'lpa',         [44.9, 119, 69.3], ...
            'rpa',         [204.1, 118, 68.4], ...
            'ac',          [123, 135, 112.3], ...
            'pc',          [123, 98, 107.4], ...
            'ih',          [126, 98, 154.3]);
end
        
%% Process: Import MRI
sFiles = bst_process('CallProcess', 'process_import_mri', [], [], ...
        'subjectname', SubjectName, ...
        'mrifile',     {[MyPrevBstAnatFolder 'subjectimage_T1.mat'], 'BST'}, ...
        'nas',         [123, 218, 104.5], ...
        'lpa',         [44.9, 119, 69.3], ...
        'rpa',         [204.1, 118, 68.4], ...
        'ac',          [123, 135, 112.3], ...
        'pc',          [123, 98, 107.4], ...
        'ih',          [126, 98, 154.3]);

%% Process: Import surfaces
sFiles = bst_process('CallProcess', 'process_import_surfaces', [], [], ...
    'subjectname', SubjectName, ...
    'headfile',    {[MyPrevBstAnatFolder 'tess_head_mask.mat'], 'BST'}, ...
    'cortexfile1', {[MyPrevBstAnatFolder 'tess_cortex_pial_low.mat'], 'BST'}, ...
    'cortexfile2', [], ...
    'innerfile',   {[MyPrevBstAnatFolder 'tess_innerskull_bem_3242V.mat'], 'BST'}, ...
    'outerfile',   {[MyPrevBstAnatFolder 'tess_outerskull_bem_3242V.mat'], 'BST'},...
    'nverthead',   7000, ...
    'nvertcortex', 15000, ...
    'nvertskull',  7000);
            
            
%% Process: Create link to raw file
clear sFiles sFilesEpochs sFilesAvg sAvgLCMV
sFiles = bst_process('CallProcess', 'process_import_data_raw', [], [], ...
    'subjectname',    SubjectName, ...
    'datafile',       {RawFile, 'FIF'}, ...
    'channelreplace', 1, ...
    'channelalign',   1, ...
    'evtmode',        'value');

%% Mark bad channels
if isempty(strfind(dfname, 'sss'))
    sFiles = bst_process('CallProcess', 'process_channel_setbad', sFiles, [], ...
        'sensortypes', par.badch);
end

%% Get subject definition
sSubject = bst_get('Subject', SubjectName);
% Get MRI file and surface files
MriFile    = sSubject.Anatomy(sSubject.iAnatomy).FileName;
CortexFile = sSubject.Surface(sSubject.iCortex).FileName;
HeadFile   = sSubject.Surface(sSubject.iScalp).FileName;
InnSkullFile = sSubject.Surface(sSubject.iInnerSkull).FileName;
OutSkullFile = sSubject.Surface(sSubject.iOuterSkull).FileName;

if par.more_plots
    % Display MRI
    hFigMri1 = view_mri(MriFile);
    hFigMri3 = view_mri_3d(MriFile, [], [], 'NewFigure');
    hFigMri2 = view_mri_slices(MriFile, 'x', 20); 
    pause(0.5);
    % Close figures
    close([hFigMri1 hFigMri2 hFigMri3]);
    % Display scalp and cortex
    hFigSurf = view_surface(HeadFile);
    hFigSurf = view_surface(CortexFile, [], [], hFigSurf);
    hFigMriSurf = view_mri(MriFile, CortexFile);

    % Figure configuration
    iTess = 2;
    panel_surface('SetShowSulci',     hFigSurf, iTess, 1);
    panel_surface('SetSurfaceColor',  hFigSurf, iTess, [1 0 0]);
    panel_surface('SetSurfaceSmooth', hFigSurf, iTess, 0.5, 0);
    panel_surface('SetSurfaceTransparency', hFigSurf, iTess, 0.8);
    figure_3d('SetStandardView', hFigSurf, 'left');
    pause(0.5);
    % Close figures
    view_headpoints(sFiles.ChannelFile, HeadFile); 
    close([hFigSurf hFigMriSurf]);
end

%% MEG-MRI coregistration
sFiles = bst_process('CallProcess', 'process_headpoints_remove', sFiles, [], ...
            'zlimit', 5000);    
dense_dig_file = [data_dir 'Human_EF/dense_digi_points_file_for_bast_coreg_ave.fif'];
sFiles = bst_process('CallProcess', 'process_headpoints_add', sFiles, [], ...
    'channelfile', {dense_dig_file, 'FIF'}, 'fixunits', 1, 'vox2ras', 1);
sFiles = bst_process('CallProcess', 'process_headpoints_refine', sFiles, []);
if par.more_plots, view_headpoints(sFiles.ChannelFile, HeadFile); end % check the MEG/MRI alignment
    
%% Process: DC offset correction: [All file]
sFiles = bst_process('CallProcess', 'process_baseline', sFiles, [], ...
    'baseline',    [], ...
    'sensortypes', 'MEG', ...
    'method',      'bl', ...  % DC offset correction:    x_std = x - &mu;
    'read_all',    0);

%% Process: Remove linear trend: All file
sFiles = bst_process('CallProcess', 'process_detrend', sFiles, [], ...
    'timewindow',  [], ...
    'sensortypes', 'MEG', ...
    'read_all',    0);

%% Process: Band-pass
sFiles = bst_process('CallProcess', 'process_bandpass', sFiles, [], ...
    'sensortypes', 'MEG', ...
    'highpass',    par.bpfreq(1), ...
    'lowpass',     par.bpfreq(2), ...
    'attenuation', 'strict', ...  % 60dB
    'mirror',      0, ...
    'useold',      0, ...
    'read_all',    0);

%% Notch filter
    if par.bpfreq(2)>45
        sFiles = bst_process('CallProcess', 'process_notch', sFiles, [], ...
            'freqlist',    50, ...
            'sensortypes', 'MEG', ...
            'read_all',    0);
    end
%% Run for all stimulus categories   
    
for stimcat = keyset       
    stimcat = char(stimcat);
    stimval = evdict(stimcat);
    dipnum = find(valueset==evdict(stimcat));
    dfname_stim = [dfname '_' stimcat];

    if strfind(stimcat, 'VEF')
        par.ctrlwin=[-0.200, -0.050];
        par.actiwin=[0.050, 0.200];
    elseif strfind(stimcat, 'AEF')
        par.ctrlwin=[-0.150, -0.020];
        par.actiwin=[0.020, 0.150];
    elseif strfind(stimcat, 'SEF')
        par.ctrlwin=[-0.100, -0.010];
        par.actiwin=[0.010, 0.100];
    end
    fprintf('\ndipnum\t = %d\nstimcat\t = %s\nstimval\t = %d\nBaseline = [%.3f %.3f]\nData\t = [%.3f %.3f]\n',...
            dipnum, stimcat, stimval, par.ctrlwin, par.actiwin)
    par.Baseline   = par.ctrlwin;
    par.DataWindow = par.actiwin;

    %% %% ===== READ EVENTS =====
    % Process: Read from channel
    sFiles = bst_process('CallProcess', 'process_evt_read', sFiles, [], ...
        'stimchan',  par.stimchan, ...
        'trackmode', 1, ...  % Value: detect the changes of channel value
        'zero',      0);
    % Process: Delete spurious other events unrelated to dipoles
    sFiles = bst_process('CallProcess', 'process_evt_delete', sFiles, [], ...
        'eventname', '256, 768, 1792, 3072, 3840, 3584, 4096, 6144, 7168, 7680, 7936, transient, transient_bandpass');
    % Process: Rename events to have a leading zero, for proper sorting
    sFiles = bst_process('CallProcess', 'process_evt_rename', sFiles, [], ...
            'src',  num2str(evdict(stimcat)), ...
            'dest', sprintf('%02d ',evdict(stimcat)));
    eventlabel = sprintf('%02d ',evdict(stimcat));
    fprintf('\neventlabel = %s\n', eventlabel)

    %% Make Epochs 
    clear sFilesEpochs
    sFilesEpochs = bst_process('CallProcess', 'process_import_data_event', sFiles, [], ...
        'subjectname', SubjectName, ...
        'condition',   '', ...
        'eventname',   eventlabel, ...
        'timewindow',  [], ...
        'epochtime',   [par.Baseline(1), par.DataWindow(2)], ...
        'createcond',  1, ...
        'ignoreshort', 1, ...
        'usectfcomp',  0, ...
        'usessp',      0, ...
        'freq',        par.sampling_rate, ...
        'baseline',    [par.Baseline]);

    %% Remove bad trials
    par.bad_trials = [];
    [selecttrials, par] = NM_bst_varcut(sFilesEpochs, par, dfname, par.more_plots);

    badtrials = fliplr(par.bad_trials);
    for ii=badtrials
        sFilesEpochs(ii)=[];
    end
    fprintf('Remaing number of trials = %d\n',length(sFilesEpochs))
    %%  Process: Average: By trial group (folder average)
    sFilesAvg = bst_process('CallProcess', 'process_average', sFilesEpochs, [], ...
        'avgtype',    5, ...  
        'avg_func',   1, ...  
        'weighted',   0, ...
        'keepevents', 0);
    %% Plot to view time series
     NM_bst_view_dataplots(par, sFilesAvg, 20, par.more_plots)
     
    %% Process: Compute Head Model
    % Process: Generate BEM surfaces
    sFilesAvg = bst_process('CallProcess', 'process_generate_bem', sFilesAvg, [], ...
        'subjectname', SubjectName, ...
        'nscalp',      3000, ...
        'nouter',      3000, ...
        'ninner',      3000, ...
        'thickness',   4);

    sFilesAvg = bst_process('CallProcess', 'process_headmodel', sFilesAvg, [], ...
        'Comment',     'MRI_volume_brain_5mm', ...
        'sourcespace', 2, ...  % MRI volume
        'volumegrid',  struct(...
             'Method',        'isotropic', ...
             'nLayers',       17, ...
             'Reduction',     3, ...
             'nVerticesInit', 4000, ...
             'Resolution',    0.005, ...
             'FileName',      []), ...
        'meg',         3, ...  % Overlapping spheres
        'eeg',         1, ...  % 
        'ecog',        1, ...  % 
        'seeg',        1, ...  % 
        'openmeeg',    struct(...
             'BemFiles',     {{}}, ...
             'BemNames',     {{'Scalp', 'Skull', 'Brain'}}, ...
             'BemCond',      [1, 0.0125, 1], ...
             'BemSelect',    [1, 1, 1], ...
             'isAdjoint',    0, ...
             'isAdaptative', 1, ...
             'isSplit',      0, ...
             'SplitLength',  4000));       
            
    % Plot headmodel and grid locations
    if par.more_plots
        [subj_datadir, ~,~ ] = fileparts(file_fullpath(sFilesAvg.FileName));
        HeadModelFile = [subj_datadir '//headmodel_vol_os_meg.mat'];
        view_spheres(HeadModelFile, sFilesAvg.ChannelFile, sSubject)
        view_gridloc(HeadModelFile, 'V'); view(172,6), hold on
    end

    %% Process: Compute covariance (noise or data)
    bst_process('CallProcess', 'process_noisecov', sFilesEpochs, [], ...
        'baseline',       par.Baseline, ...
        'datatimewindow', par.DataWindow, ... 
        'sensortypes',    'MEG', ...
        'target',         1, ...  %noise
        'dcoffset',       1, ...  
        'identity',       0, ...
        'copycond',       0, ...
        'copysubj',       0, ...
        'replacefile',    1);  

    bst_process('CallProcess', 'process_noisecov', sFilesEpochs, [], ...
        'baseline',       par.Baseline, ...
        'datatimewindow', par.DataWindow, ... 
        'sensortypes',    'MEG', ...
        'target',         2, ...  %data
        'dcoffset',       1, ...  
        'identity',       0, ...
        'copycond',       0, ...
        'copysubj',       0, ...
        'replacefile',    1);  
    
    %% Extract averaged data
    [~, avgtime, avgdata, ~, ~] = NM_bst_extract_data(par, dfname, sFilesAvg);
    if par.more_plots
        figure(); ax1=subplot(2,2,[1 2]); ax2=subplot(2,2,3); ax3=subplot(2,2,4);
        plot(ax1, avgtime, avgdata), xlim(ax1,[avgtime(1), avgtime(end)])
        title(ax1, [dfname '- Avg.data (sensor)'])
    end
    
    %% Make LCMV
     sAvgLCMV = bst_process('CallProcess', 'process_inverse_2018', sFilesAvg, [], ...
    'output',  3, ...  % Full results: one per file
    'inverse', struct(...
         'Comment',        'PNAI: MEG ALL', ...
         'InverseMethod',  'lcmv', ...
         'InverseMeasure', 'nai', ...
         'SourceOrient',   {{'free'}}, ...
         'Loose',          0.2, ...
         'UseDepth',       1, ...
         'WeightExp',      0.5, ...
         'WeightLimit',    10, ...
         'NoiseMethod',    'reg', ...
         'NoiseReg',       0.05, ...
         'SnrMethod',      'rms', ...
         'SnrRms',         0, ...
         'SnrFixed',       3, ...
         'ComputeKernel',  0, ...
         'DataTypes',      {{'MEG GRAD', 'MEG MAG'}}));

    %% Convert 3D moment in power and find peak 
    result_lcmv = load(file_fullpath(sAvgLCMV.FileName));
    
    tlim = par.DataWindow;
    tcrop = intersect(find(result_lcmv.Time>tlim(1)), find(result_lcmv.Time<tlim(2)));
    stc_xyz = result_lcmv.ImageGridAmp(:,tcrop).^2;
    cnt=0; stc=[];
    for ii=1:3:length(stc_xyz)
        cnt=cnt+1;
        stc(cnt,:) = stc_xyz(ii,:) + stc_xyz(ii+1,:) + stc_xyz(ii+2,:);
    end
    
    grand_pow    = mean(stc,2);
    [valx, indx] = sort(abs(grand_pow),'descend');
    n_act_grid   = length(grand_pow(grand_pow > max(grand_pow(:))*0.50));
    PSVol        = n_act_grid*(par.gridres^3);
    Est_loc      = result_lcmv.GridLoc(indx(1), :)*1000;
    
    Est_locNM    = [-Est_loc(2),Est_loc(1),Est_loc(3)]; % NM_loc= [-(CTF_loc_y),(CTF_loc_x),(CTF_loc_z)]
    Est_val      = valx(1);

    difff = sqrt(sum((actual_diploc(dipnum,:)-Est_locNM).^2));
    disp(fix([Est_locNM, Est_val, difff, n_act_grid, PSVol]))    

    
    %% Plot output
    if par.more_plots
        plot(ax2, valx,'-bo', 'MarkerEdgeColor','r','MarkerSize',10), title(ax2, 'Activation order')
        set(ax2, 'XScale', 'log'), xlabel(ax2, 'Source points in decaying activation order'), ylabel(ax2, 'Activation')
        plot(ax3, grand_pow,'--bo', 'MarkerEdgeColor','r','MarkerSize',5), title(ax3, 'Activation at each grid location')
        xlabel(ax3, 'Source points'), ylabel(ax3, 'Activation')
        set(findall(gcf, '-property', 'FontSize'), 'FontSize', 15)
        set(findall(gcf, '-property', 'interpreter'), 'interpreter', 'none')
    end
    %%
    clearex phantom_filenames DipoleFile SubjectName ProtocolName par actual_diploc ...
            bst_dir mri_dir data_dir code_dir i_file keyset valueset evdict sFiles ...
            sFilesEpochs RawFile dfname stimcat sSubject MriFile CortexFile HeadFile ...
            InnSkullFile OutSkullFile
    close all
end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% END %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%